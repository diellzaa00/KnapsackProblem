package ai;
import java.util.*;

/** Greedy Search to solve FRACTIONAL KnapSack problem */
public class KnapsackGreedySearch {
	    public static void main(String[] args) {
	    	
	        
	        int[] profit = {79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42};
	        int[] weight =  {85, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34};
	        int object = profit.length;
	        int m = 300;
	        int l = 15;
	       
	        
	    	//TEST 2
	    	/*
	        int[] profit = {79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 5, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 4242, 5, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 
	        		5, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 425, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 4218, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42};
	        int[] weight = {85, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 5, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42
	        		,5, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 5, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 4255, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 5, 26, 48, 21, 22, 95, 43, 45, 55, 52, 23, 12, 11, 45, 22, 44, 55, 66, 12, 32, 44, 9, 5, 4, 3, 22, 19, 34, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42, 79, 32, 47, 18, 26, 85, 33, 40, 45, 59, 48, 78, 29, 21, 51, 92, 34, 10, 20, 30, 40, 1, 2, 3, 4, 12, 32, 42};
	        int object = profit.length;
	        int m = 2000;
	        int l = 100;
	        
	    	
	        /** TEST 3
	           int weight[] = new int[object];
	        int profit[] = new int[object];
	         * int object = 10000;
	        for (int i = 0; i < object; i++) {
	            Random r = new Random();
	            profit[i] = r.nextInt(100);
	            weight[i] = r.nextInt(100);
	        }
	        m = 3000;
	        int l = 100;
			*/
	    	
	    	/** TEST 4
	        int[] profit = {53, 3, 11, 62, 4, 9, 60, 3, 69, 53, 76, 24, 4, 12, 8, 80, 41, 23, 49, 76, 22, 81, 19, 38, 51, 13, 62, 56, 59, 54, 41, 85, 60, 52, 27, 69, 28, 97, 91, 31, 66, 36, 41, 63, 4, 85, 44, 38, 67, 53, 31, 67, 41, 6, 94, 40, 8, 84, 6, 34, 35, 83, 73, 18, 82, 25, 25, 66, 27, 11, 85, 55, 79, 8, 89, 13, 69, 50, 18, 40, 77, 62, 57, 18, 22, 38, 6, 4, 82, 62, 55, 86, 49, 29, 67, 99, 78, 54, 61, 68};
	         int[] weight  = {43, 67, 45, 75, 24, 48, 31, 65, 27, 77, 93, 28, 60, 24, 48, 71, 71, 17, 74, 73, 63, 87, 21, 12, 62, 85, 58, 85, 19, 56, 99, 22, 92, 73, 38, 12, 12, 25, 16, 22, 60, 62, 99, 75, 35, 62, 13, 76, 0, 54, 97, 6, 97, 36, 83, 70, 18, 74, 64, 48, 75, 50, 44, 54, 98, 52, 69, 73, 29, 83, 45, 19, 12, 60, 8, 7, 20, 94, 19, 7, 45, 47, 65, 52, 93, 76, 12, 55, 34, 82, 24, 89, 1, 89, 9, 25, 66, 91, 38, 78};
	         int object = 100;
	         int m = 200;
	         int l = 15;
	         */
	        
	        
	        // Sorting the objects based on profit-to-weight ratio
	        double p_w[] = new double[object];
	        for (int i = 0; i < object; i++) {
	        	p_w[i] = (double) profit[i] / (double) weight[i];
	        }
	        for (int i = 0; i < object - 1; i++) {
	            for (int j = i + 1; j < object; j++) {
	                if (p_w[i] < p_w[j]) {
	                    double temp = p_w[j];
	                    p_w[j] = p_w[i];
	                    p_w[i] = temp;

	                    int temp1 = profit[j];
	                    profit[j] = profit[i];
	                    profit[i] = temp1;

	                    int temp2 = weight[j];
	                    weight[j] = weight[i];
	                    weight[i] = temp2;
	                }
	            }
	        }
	        
	
	        int[] solution = solveKnapsack(weight, profit, m, l);
	        System.out.println("Final Profit: " + calculateTotalProfit(solution, profit));

	        // Printing the selected items
	        System.out.println("Selected Items: ");
	        for (int i = 0; i < 15; i++) {
	            if (solution[i] == 1) {
	                System.out.print(i + 1 + " ");
	            }
	        }
	    }

	    private static int[] solveKnapsack(int[] weight, int[] profit, int maxCapacity, int m) {
	        int n = weight.length;
	        int[] solution = new int[n];
	        int currentCapacity = maxCapacity;

	        for (int i = 0; i < m; i++) {
	            if (weight[i] <= currentCapacity) {
	                solution[i] = 1;
	                currentCapacity -= weight[i];
	            }
	        }

	        return solution;
	    }

	    private static int calculateTotalProfit(int[] solution, int[] profit) {
	        int totalProfit = 0;
	        for (int i = 0; i < solution.length; i++) {
	            if (solution[i] == 1) {
	                totalProfit += profit[i];
	            }
	        }
	        return totalProfit;
	    }
	
}
